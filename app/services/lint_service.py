import asyncio
import re
from typing import Dict, List, Tuple
from app.services.task_service import update_task_result

LintWarning = Tuple[str, str, str, str, str, str, str, str]


async def run_lint_check(task_id: str, uid: str):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ª–∏–Ω—Ç–∏–Ω–≥-–ø—Ä–æ–≤–µ—Ä–∫–∏.

    :param task_id: ID –∑–∞–¥–∞—á–∏
    :param uid: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        print("START LINT CHECK")
        output = await execute_docker_command(task_id, uid, 4)
        idxs = await analyze_lint_output(output)
        # grouped_errors = await analyze_lint_output(output)
        # total_warnings = output.count("warning:")
        # formatted_result = await format_lint_results(grouped_errors, total_warnings)
        # short_result = f"Warnings: {output.count("warning:")} Errors: {output.count("error:")}"
        print(output)
        update_task_result(
            task_id,
            {
                "status": "completed", "lint_result": {"idxs": idxs},
            })


    except Exception as e:
        update_task_result(task_id,
                           {"status": "error",
                            "message": str(e)})


async def execute_docker_command(task_id: str, uid: str, lab_num: int):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–∏–Ω—Ç–∏–Ω–≥-–ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–≤–æ–¥.

    :param task_id: ID –∑–∞–¥–∞—á–∏
    :param uid: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    """
    docker_cmd = f"docker run --rm -t -v $(pwd)/testing/files/{uid}/{task_id}/source:/app/files:ro -v $(pwd)/testing/configs/.clang-tidy:/app/configs/.clang-tidy -v $(pwd)/testing/files/{uid}/{task_id}/source/res.yaml:/app/res.yaml distroit/lint"
    process = await asyncio.create_subprocess_shell(
        docker_cmd,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
        shell=True
    )

    stdout, stderr = await process.communicate()
    print(stdout)
    if process.returncode != 0:
        update_task_result(task_id, {"status": "error", "message": stderr.decode()})
    else:
        return stdout.decode().strip()


async def analyze_lint_output(output: str):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–∏–Ω—Ç–∏–Ω–≥-–≤—ã–≤–æ–¥ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.

    :param output: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –ª–∏–Ω—Ç–∏–Ω–≥-–ø—Ä–æ–≤–µ—Ä–∫–∏
    :return: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É
    """
    line_nums = []
    pattern = r'((\/\w+)+\/(\w+.cpp)):(\d+):(\d+): warning: ((.)+) \[([\w -]+)\]'
    matches = await asyncio.to_thread(re.findall, pattern, output)
    for match in matches:
        line_nums.append(match[3])
        print(match[2], match[3])
    return line_nums


async def format_lint_results(grouped_errors: Dict[str, List[LintWarning]], total_warnings: int):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ —É–¥–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç.

    :param grouped_errors: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É
    :param total_warnings: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    :return: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    """
    result = [f"–í —Ñ–∞–π–ª–µ –Ω–∞–π–¥–µ–Ω–æ {total_warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n"]
    for error_type, errors in grouped_errors.items():
        result.append(f"üõë –û—à–∏–±–∫–∞: {error_type}")
        for idx, match in enumerate(errors, 1):
            result.append(
                f"  {idx}. –§–∞–π–ª: {match[2]}, —Å—Ç—Ä–æ–∫–∞: {match[3]}. –û–ø–∏—Å–∞–Ω–∏–µ: {match[5]}"
            )
        result.append("\n")
    return "\n".join(result)
